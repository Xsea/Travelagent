from openai import AzureOpenAI
from Aufgaben.d_Agenten.tools_description import tool_belt
from Aufgaben.d_Agenten.a_Planning.examplePlan import  plan

client = AzureOpenAI()

def next_step(plan, executed_steps, chat_history, tools):
    ###########
    # Create a request that takes the plan and executed steps and compares them to determine the next step
    # Do not worry about executed steps too much for now. Just pass it as an additional system message)
    # let the LLM answer in a given json format,
    # this gives you  more control how the answer looks like and can manipulate it
    # the JSON should contain following parameters:
        # 1. chainOfThoughts (as a first parameter for the llm to think)
        # 2. nextStep: (the determined next step - this is the interesting part which will be used to determine the tool)
        # 3. finish: a boolean, only true if the agent determines the task to be finished and then can be used to break the loop
    # The output we call "next_step" and is just a normal text generated by the LLM
    ###########
    completion_step = client.chat.completions.create(
        model="gpt-4o",
        tools=tools,
        tool_choice='none',
        messages=[
            {"role": "system",
             "content": """#########"""},
            {
                "role": "system",
                "content": plan
                },
            {
                "role": "system",
                "content": executed_steps
                },
            {
                "role": "system",
                "content": chat_history
                }
            ]
        )
    return completion_step.choices[0].message.content


if __name__ == "__main__":
    print(next_step(plan, "", "", tool_belt))
